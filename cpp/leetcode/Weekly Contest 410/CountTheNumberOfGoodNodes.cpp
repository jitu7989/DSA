

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ii = pair<ll,ll>;

//---- Debugger ---- //
#define debarr(a,n) cout<<#a<<" : ";for(int i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define debmat(mat,row,col) cout<<#mat<<" :\n";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
#define pr(...) dbs(#__VA_ARGS__, __VA_ARGS__)
template <class S, class T>ostream& operator <<(ostream& os, const pair<S, T>& p) {return os << "(" << p.first << ", " << p.second << ")";}
template <class T>ostream& operator <<(ostream& os, const vector<T>& p) {os << "[ "; for (auto& it : p) os << it << " "; return os << "]";}
template <class T>ostream& operator <<(ostream& os, const unordered_set<T>& p) {os << "[ "; for (auto& it : p) os << it << " "; return os << "]";}
template <class S, class T>ostream& operator <<(ostream& os, const unordered_map<S, T>& p) {os << "[ "; for (auto& it : p) os << it << " "; return os << "]";}
template <class T>ostream& operator <<(ostream& os, const set<T>& p) {os << "[ "; for (auto& it : p) os << it << " "; return os << "]";}
template <class T>ostream& operator <<(ostream& os, const multiset<T>& p) {os << "[ "; for (auto& it : p) os << it << " "; return os << "]";}
template <class S, class T>ostream& operator <<(ostream& os, const map<S, T>& p) {os << "[ "; for (auto& it : p) os << it << " "; return os << "]";}
template <class T> void dbs(string str, T t) {cerr << str << " : " << t << "\n";}
template <class T, class... S> void dbs(string str, T t, S... s) {int idx = str.find(','); cerr << str.substr(0, idx) << " : " << t << ","; dbs(str.substr(idx + 1), s...);}
template <class T> void prc(T a, T b) {cerr << "["; for (T i = a; i != b; ++i) {if (i != a) cerr << ", "; cerr << *i;} cerr << "]\n";}
ll binpow(ll b,ll p,ll mod){ll ans=1;b%=mod;for(;p;p>>=1){if(p&1)ans=ans*b%mod;b=b*b%mod;}return ans;}

class Solution {
public:

    int solve(map<int,vector<int>> &g, int node, int &ans, vector<bool> &visited){
        visited[node] = true;
        vector<int> &n = g[node];
        int x = -1;
        int sum = 0;
        bool f = true;
        for (int i = 0; i < n.size(); ++i) {
            if(!visited[n[i]]){
                int temp = solve(g,n[i],ans,visited);
                if(x==-1) x = temp;
                sum+=temp;
                if(temp!=x) f = false;
            }
        }
        if(f) ans++;
        return sum+1;
    }
    int countGoodNodes(vector<vector<int>>& edges) {

        map<int,vector<int>> g;
        for (int i = 0; i <= edges.size()+1; ++i) {
            vector<int> temp;
            g[i] = temp;
        }
        for (const auto &item: edges) {
            g[item[0]].push_back(item[1]);
            g[item[1]].push_back(item[0]);
        }
        vector<bool> visited(1e5+10, false);
        int ans = 0;
        solve(g,0,ans,visited);
        return ans;
    }
};

signed main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    Solution s;
    vector<vector<int>> v{{0,1},{1,2},{1,3},{1,4},{0,5},{5,6},{6,7},{7,8},{0,9},{9,10},{9,12},{10,11}};
    vector<vector<int>> v1{{0,1},{0,2},{1,3},{1,4},{2,5},{2,6}};
    vector<vector<int>> v2{{508,0},{27,508},{66,27},{370,66},{447,370},{476,447},{415,370},{141,415},{44,141},{268,415},{274,268},{182,66},{131,182},{50,131},{148,50},{241,148},{461,241},{312,461},{267,461},{16,461},{464,461},{246,461},{368,461},{385,461},{275,461},{307,461},{335,461},{156,461},{327,241},{428,327},{181,428},{110,181},{165,181},{410,165},{364,165},{406,428},{77,327},{55,77},{449,77},{147,77},{330,50},{169,330},{134,169},{178,330},{443,178},{51,443},{13,443},{492,330},{422,492},{408,27},{115,408},{177,115},{76,177},{47,76},{87,47},{236,87},{40,236},{434,236},{372,236},{122,236},{92,236},{391,236},{458,236},{137,236},{291,236},{164,236},{70,236},{442,236},{118,236},{286,236},{198,236},{455,236},{497,236},{498,236},{99,236},{387,236},{424,236},{91,236},{211,236},{407,236},{208,236},{96,236},{229,236},{49,236},{231,236},{123,87},{132,123},{56,123},{319,123},{125,123},{240,123},{71,115},{228,71},{257,115},{206,257},{133,206},{250,133},{403,250},{320,403},{175,133},{57,206},{308,57},{73,308},{116,73},{339,73},{65,73},{358,73},{386,73},{207,57},{189,207},{305,189},{247,207},{4,247},{507,257},{512,507},{139,512},{9,139},{444,139},{302,139},{360,302},{433,512},{510,433},{72,433},{223,507},{213,223},{205,223},{457,223},{452,223},{300,452},{366,507},{404,366},{393,366},{256,257},{202,256},{248,202},{346,256},{126,346},{222,126},{480,346},{26,346},{62,26},{138,62},{158,26},{83,346},{216,83},{154,256},{487,154},{439,154},{32,439},{488,32},{5,439},{93,115},{471,93},{511,471},{344,511},{171,511},{263,171},{426,511},{430,426},{251,430},{100,430},{332,100},{412,332},{204,412},{501,426},{195,511},{82,195},{142,82},{232,142},{269,232},{297,269},{290,297},{289,142},{328,471},{233,328},{42,233},{411,42},{427,411},{17,427},{276,17},{432,276},{23,276},{375,17},{149,375},{359,233},{273,359},{19,273},{353,19},{349,273},{440,233},{463,440},{321,328},{429,321},{53,321},{150,328},{119,150},{502,150},{28,328},{146,471},{354,146},{54,354},{465,54},{214,465},{451,54},{140,451},{496,354},{69,496},{25,496},{97,496},{249,496},{382,496},{352,496},{230,496},{453,496},{167,496},{168,496},{261,496},{336,27},{509,336},{295,509},{418,295},{460,418},{397,460},{315,460},{500,315},{475,500},{284,475},{227,284},{388,284},{34,475},{107,34},{245,500},{33,245},{155,33},{212,33},{362,245},{495,362},{438,460},{193,438},{281,193},{462,281},{244,462},{316,462},{46,281},{468,46},{176,468},{18,193},{446,18},{378,18},{29,18},{235,29},{60,193},{473,60},{103,473},{334,103},{323,334},{98,509},{459,98},{306,459},{347,306},{162,459},{86,162},{85,98},{467,85},{357,467},{373,357},{242,373},{35,242},{128,35},{221,35},{151,35},{179,35},{419,35},{217,35},{280,35},{367,35},{287,35},{24,35},{272,35},{340,35},{310,35},{309,373},{224,309},{376,224},{135,357},{341,135},{136,341},{238,135},{355,238},{304,355},{399,238},{105,399},{152,105},{121,399},{482,357},{84,482},{470,84},{264,470},{197,470},{262,84},{298,262},{477,298},{343,298},{348,262},{1,262},{441,1},{190,441},{188,467},{219,188},{180,219},{194,180},{111,180},{392,111},{313,180},{405,313},{303,313},{78,303},{81,313},{396,180},{174,188},{239,174},{282,239},{479,282},{161,282},{170,239},{454,170},{506,454},{324,174},{389,324},{481,324},{163,324},{192,324},{237,324},{401,188},{173,401},{259,509},{369,259},{317,369},{296,317},{203,296},{337,203},{381,337},{31,203},{445,203},{384,445},{271,445},{48,317},{6,48},{200,48},{37,48},{80,48},{425,48},{478,48},{361,48},{417,369},{435,417},{485,417},{472,417},{102,417},{79,369},{299,79},{12,299},{490,79},{225,490},{436,259},{466,436},{277,466},{377,466},{253,466},{112,466},{266,466},{104,466},{423,466},{90,466},{326,466},{210,466},{421,466},{185,466},{279,466},{218,466},{21,466},{416,466},{456,466},{505,466},{153,466},{15,466},{380,466},{329,466},{489,466},{120,466},{350,466},{172,466},{363,466},{398,466},{270,466},{325,466},{503,466},{283,466},{402,466},{191,466},{293,466},{61,466},{3,466},{88,466},{338,466},{493,466},{14,466},{301,466},{68,466},{504,466},{7,466},{278,466},{390,466},{45,466},{8,466},{30,466},{383,466},{260,466},{234,466},{409,466},{491,466},{356,466},{43,466},{20,466},{145,466},{184,466},{101,466},{89,466},{157,466},{294,466},{318,466},{94,466},{129,466},{10,466},{114,466},{52,466},{395,466},{420,466},{437,466},{144,466},{314,466},{285,466},{187,466},{75,466},{413,466},{2,466},{196,466},{226,466},{414,466},{342,466},{469,466},{254,466},{474,466},{108,466},{220,466},{483,466},{143,466},{486,466},{265,466},{159,466},{431,466},{127,466},{201,466},{64,336},{63,64},{58,64},{255,58},{258,58},{292,58},{322,58},{394,64},{130,394},{39,130},{365,64},{186,365},{351,336},{311,351},{166,311},{117,166},{345,117},{106,345},{124,106},{243,106},{74,106},{160,106},{95,106},{288,106},{499,106},{22,166},{484,22},{374,484},{494,374},{183,494},{36,183},{379,183},{38,379},{400,379},{448,379},{41,494},{333,374},{450,333},{331,484},{67,331},{113,67},{252,113},{11,166},{371,11},{215,371},{209,371},{109,11},{199,109},{59,109}};
    s.countGoodNodes(v2);

    return 0;
}

